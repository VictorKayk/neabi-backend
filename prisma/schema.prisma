generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  name        String
  email       String   @unique
  password    String?
  accessToken String   @unique
  createdAt   DateTime
  updatedAt   DateTime
  isVerified  Boolean
  isDeleted   Boolean

  UserHasRoles UserHasRoles[]
  Token        Token[]
}

model Role {
  id        String   @id
  role      String   @unique
  createdAt DateTime
  updatedAt DateTime
  isDeleted Boolean

  UserHasRoles UserHasRoles[]
}

model UserHasRoles {
  userId    String
  roleId    String
  createdAt DateTime
  updatedAt DateTime
  isDeleted Boolean

  User  User @relation(fields: [userId], references: [id])
  Roles Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Token {
  userId    String
  token     String   @unique
  createdAt DateTime
  expiresAt DateTime
  isDeleted Boolean

  User                   User                     @relation(fields: [userId], references: [id])
  VerificationToken      VerificationToken[]
  ResetUserPasswordToken ResetUserPasswordToken[]
}

model VerificationToken {
  id    String @id
  token String @unique

  Token Token @relation(fields: [token], references: [token])
}

model ResetUserPasswordToken {
  id    String @id
  token String @unique

  Token Token @relation(fields: [token], references: [token])
}

model Post {
  id              String   @id
  slug            String   @unique
  title           String
  description     String
  descriptionHtml String
  createdAt       DateTime
  updatedAt       DateTime
  isDeleted       Boolean

  PostHasAttachment PostHasAttachment[]
  PostHasTag PostHasTag[]
}

model FileType {
  id        String   @id
  type      String   @unique
  createdAt DateTime
  updatedAt DateTime
  isDeleted Boolean

  FileFormat FileFormat[]
}

model FileFormat {
  id         String   @id
  format     String   @unique
  fileTypeId String
  createdAt  DateTime
  updatedAt  DateTime
  isDeleted  Boolean

  FileType FileType @relation(fields: [fileTypeId], references: [id])
  File     File[]
}

model File {
  id               String  @id
  originalFileName String?
  size             Int?
  downloadUrl      String?
  fileFormatId     String
  attachmentId     String  @unique

  FileFormat   FileFormat    @relation(fields: [fileFormatId], references: [id])
  Attachment   Attachment    @relation(fields: [attachmentId], references: [id])
  LocalFile    LocalFile?
  ExternalFile ExternalFile?
}

model LocalFile {
  fileId String @unique

  File File @relation(fields: [fileId], references: [id])
}

model ExternalFile {
  externalId String
  fileId     String @unique

  File File @relation(fields: [fileId], references: [id])
}

model Url {
  id           String @id
  attachmentId String @unique

  Attachment Attachment @relation(fields: [attachmentId], references: [id])
}

model Attachment {
  id        String   @id
  name      String
  url       String
  createdAt DateTime
  updatedAt DateTime
  File      File?
  Url       Url?

  PostHasAttachment PostHasAttachment[]
}

model PostHasAttachment {
  postId       String
  attachmentId String
  createdAt    DateTime
  updatedAt    DateTime

  Post       Post       @relation(fields: [postId], references: [id])
  Attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@id([postId, attachmentId])
}

model Tag {
  id        String   @id
  tag       String   @unique
  createdAt DateTime
  updatedAt DateTime
  isDeleted Boolean
  
  PostHasTag PostHasTag[]
}

model PostHasTag {
  postId       String
  tagId String
  createdAt    DateTime
  updatedAt    DateTime

  Post       Post       @relation(fields: [postId], references: [id])
  Tag Tag @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}